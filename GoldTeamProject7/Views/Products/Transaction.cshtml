@model GoldTeamProject7.Models.TransactionViewModel
@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "Transaction";
}

@Html.DisplayFor(model => model.Product.Title)

@Html.DisplayFor(model => model.Product.Price)

<img src="data:image;base64,@Convert.ToBase64String(Model.Product.MainPhoto)" />

@Html.DisplayFor(model => model.Product.ApplicationUser.FirstName)

@Html.DisplayFor(model => model.Product.ApplicationUser.Zipcode)

<img src="data:image;base64,@Convert.ToBase64String(Model.Product.ApplicationUser.ProfileImage)" />



<script>


    var directionDisplay;
    var directionsService = new google.maps.DirectionsService();
    var map;
    var polyline = null;
    var infowindow = new google.maps.InfoWindow();


    function createMarker(latlng, label, html) {
        // alert("createMarker("+latlng+","+label+","+html+","+color+")");
        var contentString = '<b>' + label + '</b><br>' + html;
        var marker = new google.maps.Marker({
            position: latlng,
            map: map,
            title: label,
            zIndex: Math.round(latlng.lat() * -100000) << 5
        });
        marker.myname = label;
        // gmarkers.push(marker);

        google.maps.event.addListener(marker, 'click', function () {
            infowindow.setContent(contentString + "<br>" + marker.getPosition().toUrlValue(6));
            infowindow.open(map, marker);
        });

        return marker;
    }

    function calcRoute() {

        // var start = document.getElementById("start").value;
        // var end = document.getElementById("end").value;

        var start = "@Html.DisplayFor(model => model.Product.ApplicationUser.Zipcode)";
        var end = "@Html.DisplayFor(model => model.CurrentUser.Zipcode)";

        var travelMode = google.maps.DirectionsTravelMode.DRIVING

        var request5 = {
            origin: start,
            destination: end,
            travelMode: travelMode
        };

        directionsService.route(request5, function (response, status) {

            if (status == google.maps.DirectionsStatus.OK) {
                polyline.setPath([]);

                var bounds = new google.maps.LatLngBounds();

                startLocation = new Object();
                endLocation = new Object();

                directionsDisplay.setDirections(response);

                var route = response.routes[0];
                var summaryPanel = document.getElementById("directions_panel");

                summaryPanel.innerHTML = "";

                // For each route, display summary information.
                var path = response.routes[0].overview_path;
                var legs = response.routes[0].legs;

                for (i = 0; i < legs.length; i++) {
                    if (i == 0) {
                        startLocation.latlng = legs[i].start_location;
                        startLocation.address = legs[i].start_address;
                        // marker = google.maps.Marker({map:map,position: startLocation.latlng});
                        marker = createMarker(legs[i].start_location, "Midpoint", "", "green");
                    }
                    endLocation.latlng = legs[i].end_location;
                    endLocation.address = legs[i].end_address;
                    var steps = legs[i].steps;
                    for (j = 0; j < steps.length; j++) {
                        var nextSegment = steps[j].path;
                        for (k = 0; k < nextSegment.length; k++) {
                            polyline.getPath().push(nextSegment[k]);
                            bounds.extend(nextSegment[k]);
                        }
                    }
                }

                polyline.setMap(map);

                computeTotalDistance(response);
            } else {
                alert("directions response " + status);
            }
        });
    }



    var totalDist = 0;
    var totalTime = 0;

    function computeTotalDistance(result) {

        totalDist = 0;
        totalTime = 0;
        var myroute = result.routes[0];
        for (i = 0; i < myroute.legs.length; i++) {
            totalDist += myroute.legs[i].distance.value;
            totalTime += myroute.legs[i].duration.value;
        }

        putMarkerOnRoute(50);

        //distance and time HTML display
        totalDist = Math.round((totalDist / 1000) * 0.621371) / 2
        document.getElementById("total").innerHTML = totalDist + " mi away. Or, " + Math.round((totalTime / 60).toFixed(2) / 2) + " minutes";

    }

    function putMarkerOnRoute(percentage) {

        var distance = (percentage / 100) * totalDist;
        var time = ((percentage / 100) * totalTime / 60).toFixed(2);

        if (!marker) {

            marker = createMarker(polyline.GetPointAtDistance(distance), "time: " + time, "marker");

        } else {

            marker.setPosition(polyline.GetPointAtDistance(distance));

            midpoint_latlong = marker.getPosition(6);

            request2 = {
                location: midpoint_latlong,
                radius: 500,
                types: [
                  'airport',
                  'accounting',
                  'amusement_park',
                  'aquarium',
                  'art_gallery',
                  'atm',
                  'bakery',
                  'bank',
                  'bar',
                  'beauty_salon',
                  'bicycle_store',
                  'book_store',
                  'bowling_alley',
                  'bus_station',
                  'cafe',
                  'campground',
                  'car_dealer',
                  'car_rental',
                  'car_repair',
                  'car_wash',
                  'casino',
                  'cemetery',
                  'church',
                  'city_hall',
                  'clothing_store',
                  'convenience_store',
                  'courthouse',
                  'dentist',
                  'department_store',
                  'doctor',
                  'electrician',
                  'electronics_store',
                  'embassy',
                  'establishment',
                  'finance',
                  'fire_station',
                  'florist',
                  'food',
                  'funeral_home',
                  'furniture_store',
                  'gas_station',
                  'general_contractor',
                  'grocery_or_supermarket',
                  'gym',
                  'hair_care',
                  'hardware_store',
                  'health',
                  'hindu_temple',
                  'home_goods_store',
                  'hospital',
                  'insurance_agency',
                  'jewelry_store',
                  'laundry',
                  'lawyer',
                  'library',
                  'liquor_store',
                  'local_government_office',
                  'locksmith',
                  'lodging',
                  'meal_delivery',
                  'meal_takeaway',
                  'mosque',
                  'movie_rental',
                  'movie_theater',
                  'moving_company',
                  'museum',
                  'night_club',
                  'painter',
                  'park',
                  'parking',
                  'pet_store',
                  'pharmacy',
                  'physiotherapist',
                  'place_of_worship',
                  'plumber',
                  'police',
                  'post_office',
                  'real_estate_agency',
                  'restaurant',
                  'roofing_contractor',
                  'rv_park',
                  'school',
                  'shoe_store',
                  'shopping_mall',
                  'spa',
                  'stadium',
                  'storage',
                  'store',
                  'subway_station',
                  'synagogue',
                  'taxi_stand',
                  'train_station',
                  'travel_agency',
                  'university',
                  'veterinary_care',
                  'zoo'
                ]
            };

            var service = new google.maps.places.PlacesService(map);
            service.search(request2, callback);

        }
    }


    function callback(results) {
        for (var i = 0; i < results.length; i++) {
            createMarker2(results[i]);
        }
    }

    function createMarker2(place) {
        var placeLoc = place.geometry.location;
        var marker2 = new google.maps.Marker({
            map: map,
            position: place.geometry.location
        });

        google.maps.event.addListener(marker2, 'click', function () {

            infowindow.setContent(place.name);
            infowindow.open(map, marker2);

        });

        map.setZoom(14);
        map.panTo(marker.position);
    }


    function initialize() {

        directionsDisplay = new google.maps.DirectionsRenderer({ suppressMarkers: true });

        var chicago = new google.maps.LatLng(41.850033, -87.6500523);

        var myOptions = {
            zoom: 80,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: chicago
        }

        map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

        polyline = new google.maps.Polyline({
            path: [],
            strokeColor: '#FF0000',
            strokeWeight: 3
        });

        directionsDisplay.setMap(map);

        calcRoute();

    }

</script>

<div id="map_canvas" style="float:left;width:500px;height:500px;"></div>
<div id="control_panel" style="float:right;width:30%;text-align:left;padding-top:20px">
    <div id="directions_panel" style="margin:20px;background-color:#FFEE77;"></div>
    <p class="">The central location is:</p>
    <div id="total"></div>
    <div id="markerval"></div>
    </div>
</div>

